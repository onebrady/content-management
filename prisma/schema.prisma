generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  email           String            @unique
  name            String?
  role            UserRole          @default(CONTRIBUTOR)
  department      String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  password        String?
  accounts        Account[]
  approvals       Approval[]
  comments        Comment[]
  assignedContent Content[]         @relation("ContentAssignee")
  createdContent  Content[]         @relation("ContentAuthor")
  activities      ContentActivity[]
  contentVersions ContentVersion[]
  notifications   Notification[]
  sessions        Session[]
}

model Content {
  id            String            @id @default(cuid())
  title         String
  body          Json
  status        ContentStatus     @default(DRAFT)
  type          ContentType
  priority      Priority          @default(MEDIUM)
  dueDate       DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  publishedAt   DateTime?
  version       Int               @default(1)
  authorId      String
  assigneeId    String?
  approvals     Approval[]
  attachments   Attachment[]
  comments      Comment[]
  assignee      User?             @relation("ContentAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  author        User              @relation("ContentAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  activities    ContentActivity[]
  versions      ContentVersion[]
  notifications Notification[]
  tags          Tag[]             @relation("ContentToTag")
}

model Approval {
  id        String         @id @default(cuid())
  status    ApprovalStatus
  comments  String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  contentId String
  userId    String
  content   Content        @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([contentId, userId])
}

model Comment {
  id          String    @id @default(cuid())
  commentText String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  contentId   String
  userId      String
  parentId    String?
  content     Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[] @relation("CommentReplies")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([contentId])
  @@index([userId])
  @@index([parentId])
}

model Attachment {
  id        String   @id @default(cuid())
  filename  String
  url       String
  size      Int
  createdAt DateTime @default(now())
  contentId String
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  contents  Content[] @relation("ContentToTag")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ContentActivity {
  id        String   @id @default(cuid())
  contentId String
  userId    String
  action    String
  details   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([contentId])
  @@index([userId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  contentId String?
  type      String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   Content? @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([contentId])
  @@index([isRead])
}

model ContentVersion {
  id                String        @id @default(cuid())
  versionNumber     Int
  title             String
  body              Json
  status            ContentStatus
  type              ContentType
  priority          Priority
  dueDate           DateTime?
  createdAt         DateTime      @default(now())
  changeDescription String?
  contentId         String
  createdById       String
  content           Content       @relation(fields: [contentId], references: [id], onDelete: Cascade)
  createdBy         User          @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@unique([contentId, versionNumber])
  @@index([contentId])
  @@index([createdById])
}

enum UserRole {
  VIEWER
  CONTRIBUTOR
  MODERATOR
  ADMIN
}

enum ContentStatus {
  DRAFT
  IN_REVIEW
  APPROVED
  REJECTED
  PUBLISHED
}

enum ContentType {
  ARTICLE
  BLOG_POST
  MARKETING_COPY
  DOCUMENTATION
  SOCIAL_MEDIA
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}
